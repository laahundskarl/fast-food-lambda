name: Infrastructure - Deploy Lambda

on:
  push:
    branches: [ modulo_3 ]
    paths:
      - 'terraform/**'
      - 'src/**'
      - '.github/workflows/infrastructure-deploy-lambda.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  AWS_REGION: us-east-1
  LAMBDA_FUNCTION_NAME: fast-food-auth
  TF_VERSION: '1.5.0'

jobs:
  deploy-lambda:
    name: Deploy Lambda Infrastructure
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies and build
        run: |
          npm ci
          npm run prisma:generate
          npm run build

      - name: Create deployment package
        run: npm run build:package

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: terraform
        run: |
          terraform plan \
            -var="lambda_filename=../lambda-deployment.zip" \
            -var="environment=${{ github.event.inputs.environment || 'production' }}"

      - name: Terraform Apply
        working-directory: terraform
        run: |
          terraform apply -auto-approve \
            -var="lambda_filename=../lambda-deployment.zip" \
            -var="environment=${{ github.event.inputs.environment || 'production' }}"

      - name: Update Lambda function code
        run: |
          aws lambda update-function-code \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --zip-file fileb://lambda-deployment.zip \
            --region ${{ env.AWS_REGION }}

      - name: Update environment variables
        run: |
          RDS_ENDPOINT=$(aws rds describe-db-instances \
            --db-instance-identifier fastfood-db \
            --query 'DBInstances[0].Endpoint.Address' \
            --output text 2>/dev/null || echo "")

          if [ -n "$RDS_ENDPOINT" ]; then
            DATABASE_URL="mysql://admin:admin123@${RDS_ENDPOINT}:3306/fastfood?allowPublicKeyRetrieval=true"

            aws lambda update-function-configuration \
              --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
              --environment Variables="{
                \"DATABASE_URL\":\"$DATABASE_URL\",
                \"JWT_SECRET\":\"${{ secrets.JWT_SECRET || 'fast-food-secret-key-2024' }}\",
                \"NODE_ENV\":\"${{ github.event.inputs.environment || 'production' }}\"
              }" \
              --region ${{ env.AWS_REGION }}
          fi

      - name: Validate deployment
        run: |
          aws lambda invoke \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --payload '{"httpMethod":"GET","path":"/health"}' \
            response.json || true