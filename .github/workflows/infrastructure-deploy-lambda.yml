name: Infrastructure - Deploy Lambda

on:
  push:
    branches: [ modulo_3 ]
    paths:
      - 'terraform/**'
      - 'src/**'
      - '.github/workflows/infrastructure-deploy-lambda.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      force_deploy:
        description: 'Force deploy even without changes'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  LAMBDA_FUNCTION_NAME: fast-food-auth
  TF_VERSION: '1.0'

jobs:
  terraform-plan:
    name: 📋 Terraform Plan
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    outputs:
      tf-plan-exists: ${{ steps.plan.outputs.tf-plan-exists }}
      
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: ⚙️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🔧 Generate Prisma Client
        run: npm run prisma:generate
        
      - name: 🏗️ Build Lambda function
        run: npm run build
        
      - name: 📦 Create deployment package
        run: |
          cd dist
          zip -r ../lambda-deployment.zip .
          cd ..
          zip -r lambda-deployment.zip node_modules/
          
      - name: 🔧 Terraform Init
        working-directory: terraform
        run: terraform init
        
      - name: 📋 Terraform Plan
        id: plan
        working-directory: terraform
        run: |
          terraform plan -detailed-exitcode -out=tfplan \
            -var="lambda_filename=../lambda-deployment.zip" \
            -var="environment=${{ github.event.inputs.environment || 'production' }}"
          
          if [ $? -eq 2 ]; then
            echo "tf-plan-exists=true" >> $GITHUB_OUTPUT
          else
            echo "tf-plan-exists=false" >> $GITHUB_OUTPUT
          fi
          
      - name: 📁 Upload Terraform plan
        if: steps.plan.outputs.tf-plan-exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ github.sha }}
          path: terraform/tfplan
          retention-days: 7
          
      - name: 📁 Upload Lambda package
        uses: actions/upload-artifact@v4
        with:
          name: lambda-package-${{ github.sha }}
          path: lambda-deployment.zip
          retention-days: 7

  terraform-apply:
    name: 🚀 Deploy Lambda Infrastructure
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: needs.terraform-plan.outputs.tf-plan-exists == 'true' || github.event.inputs.force_deploy == 'true'
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: ⚙️ Configure AWS credentials
        uses: actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: 📁 Download Lambda package
        uses: actions/download-artifact@v4
        with:
          name: lambda-package-${{ github.sha }}
          
      - name: 📁 Download Terraform plan
        if: needs.terraform-plan.outputs.tf-plan-exists == 'true'
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-${{ github.sha }}
          path: terraform/
          
      - name: 🔧 Terraform Init
        working-directory: terraform
        run: terraform init
        
      - name: 🚀 Terraform Apply
        working-directory: terraform
        run: |
          if [ "${{ needs.terraform-plan.outputs.tf-plan-exists }}" == "true" ]; then
            terraform apply tfplan
          else
            terraform apply -auto-approve \
              -var="lambda_filename=../lambda-deployment.zip" \
              -var="environment=${{ github.event.inputs.environment || 'production' }}"
          fi
          
      - name: 📤 Output deployment info
        working-directory: terraform
        run: |
          echo "## 🚀 Lambda Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Function Name:** $(terraform output -raw lambda_function_name 2>/dev/null || echo '${{ env.LAMBDA_FUNCTION_NAME }}')" >> $GITHUB_STEP_SUMMARY
          echo "**Function ARN:** $(terraform output -raw lambda_function_arn 2>/dev/null || echo 'N/A')" >> $GITHUB_STEP_SUMMARY
          echo "**API Gateway URL:** $(terraform output -raw api_gateway_url 2>/dev/null || echo 'N/A')" >> $GITHUB_STEP_SUMMARY

  update-lambda-code:
    name: 🔄 Update Lambda Code
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: always() && needs.terraform-apply.result == 'success'
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: ⚙️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: 📁 Download Lambda package
        uses: actions/download-artifact@v4
        with:
          name: lambda-package-${{ github.sha }}
          
      - name: 🔄 Update Lambda function code
        run: |
          aws lambda update-function-code \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --zip-file fileb://lambda-deployment.zip \
            --region ${{ env.AWS_REGION }}
            
      - name: ⚙️ Update Lambda environment variables
        run: |
          # Obter RDS endpoint do remote state ou AWS CLI
          RDS_ENDPOINT=$(aws rds describe-db-instances \
            --db-instance-identifier fastfood-db \
            --query 'DBInstances[0].Endpoint.Address' \
            --output text 2>/dev/null || echo "")
            
          if [ -n "$RDS_ENDPOINT" ]; then
            DATABASE_URL="mysql://admin:admin123@${RDS_ENDPOINT}:3306/fastfood?allowPublicKeyRetrieval=true"
            
            aws lambda update-function-configuration \
              --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
              --environment Variables="{
                \"DATABASE_URL\":\"$DATABASE_URL\",
                \"JWT_SECRET\":\"${{ secrets.JWT_SECRET || 'fast-food-secret-key-2024' }}\",
                \"NODE_ENV\":\"${{ github.event.inputs.environment || 'production' }}\"
              }" \
              --region ${{ env.AWS_REGION }}
              
            echo "✅ Lambda environment variables updated with RDS endpoint: $RDS_ENDPOINT"
          else
            echo "⚠️  RDS endpoint not found. Lambda will use default configuration."
          fi

  post-deploy-validation:
    name: ✅ Post-Deploy Validation
    runs-on: ubuntu-latest
    needs: [terraform-apply, update-lambda-code]
    if: always() && needs.terraform-apply.result == 'success'
    
    steps:
      - name: ⚙️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: 🔍 Validate Lambda function
        run: |
          echo "Validating Lambda function deployment..."
          
          # Check if function exists and is active
          FUNCTION_STATUS=$(aws lambda get-function \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --query 'Configuration.State' \
            --output text 2>/dev/null || echo "NotFound")
            
          if [ "$FUNCTION_STATUS" = "Active" ]; then
            echo "✅ Lambda function is active and ready"
            
            # Test function with a simple invocation
            aws lambda invoke \
              --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
              --payload '{"httpMethod":"GET","path":"/health"}' \
              response.json 2>/dev/null || true
              
            if [ -f response.json ]; then
              echo "✅ Lambda function test invocation successful"
              cat response.json
            fi
          else
            echo "❌ Lambda function status: $FUNCTION_STATUS"
            exit 1
          fi
          
      - name: 📊 Deployment Summary
        run: |
          echo "## ✅ FastFood Lambda - Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform Apply | ${{ needs.terraform-apply.result == 'success' && '✅' || '❌' }} ${{ needs.terraform-apply.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Lambda Code Update | ${{ needs.update-lambda-code.result == 'success' && '✅' || '❌' }} ${{ needs.update-lambda-code.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Post-Deploy Validation | ✅ success |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "- Lambda function is ready for authentication requests" >> $GITHUB_STEP_SUMMARY
          echo "- API Gateway endpoint available for integration" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor CloudWatch logs for function execution" >> $GITHUB_STEP_SUMMARY
