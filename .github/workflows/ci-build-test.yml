name: CI - Build and Test

on:
  push:
    branches: [ modulo_3 ]
    paths:
      - 'src/**'
      - 'package*.json'
      - 'tsconfig.json'
      - '.github/workflows/ci-build-test.yml'
  pull_request:
    branches: [ modulo_3 ]
    paths:
      - 'src/**'
      - 'package*.json'
      - 'tsconfig.json'

env:
  NODE_VERSION: '22'

jobs:
  lint-and-build:
    name:  Lint & Build
    runs-on: ubuntu-latest

    steps:
      - name:  Checkout repository
        uses: actions/checkout@v4

      - name:  Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name:  Install dependencies
        run: npm ci

      - name:  Generate Prisma Client
        run: npm run prisma:generate

      - name:  Run linting
        run: npm run lint

      - name:  Build application
        run: npm run build

      - name:  Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lambda-build-${{ github.sha }}
          path: dist/
          retention-days: 7

  security-audit:
    name:  Security Audit
    runs-on: ubuntu-latest

    steps:
      - name:  Checkout repository
        uses: actions/checkout@v4

      - name:  Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name:  Install dependencies
        run: npm ci

      - name:  Run security audit
        run: npm audit --audit-level=moderate

      - name:  Check for vulnerabilities
        run: npm audit --audit-level=high --dry-run

  validate-config:
    name:  Validate Configuration
    runs-on: ubuntu-latest

    steps:
      - name:  Checkout repository
        uses: actions/checkout@v4

      - name:  Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name:  Install dependencies
        run: npm ci

      - name:  Generate Prisma Client
        run: npm run prisma:generate

      - name:  Validate package.json
        run: |
          if ! jq empty package.json; then
            echo " package.json is not valid JSON"
            exit 1
          fi
          echo " package.json is valid"

      - name:  Validate TypeScript config
        run: |
          if ! npx tsc --noEmit --project tsconfig.json; then
            echo " TypeScript configuration is invalid"
            exit 1
          fi
          echo " TypeScript configuration is valid"

  build-summary:
    name:  Build Summary
    runs-on: ubuntu-latest
    needs: [lint-and-build, security-audit, validate-config]
    if: always()

    steps:
      - name:  Build Status Summary
        run: |
          echo "##  FastFood Lambda - Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Build | ${{ needs.lint-and-build.result == 'success' && '' || '' }} ${{ needs.lint-and-build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-audit.result == 'success' && '' || '' }} ${{ needs.security-audit.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Validate Config | ${{ needs.validate-config.result == 'success' && '' || '' }} ${{ needs.validate-config.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** `${{ github.ref_name }}`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** `${{ github.sha }}`" >> $GITHUB_STEP_SUMMARY
